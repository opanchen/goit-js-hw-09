{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAyBAD,EAAAE,OAAOC,KAAK,CACVC,QAAS,IACTC,qBAAsB,MAGxB,MAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,UAAWJ,SAASC,cAAc,0BAiCpC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,E,MAAUC,IAEpBM,EAAO,C,SAAEP,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAxCbT,EAAKM,UAAUW,iBAAiB,SAEhC,SAA0BC,GACxBA,EAAEC,iBAKJ,WACE,IAAIC,EAAQC,OAAOrB,EAAKC,WAAWqB,OACnC,MAAMC,EAAOF,OAAOrB,EAAKI,UAAUkB,OAC7BE,EAASH,OAAOrB,EAAKK,YAAYiB,OAEvC,IAAK,IAAIG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAGnClB,EAFiBkB,EAEOL,GACrBM,MAAK,EAAClB,SAAEA,EAAQC,MAAEA,KAEjBf,EAAAE,OAAO+B,QAAQ,qBAAqBnB,QAAeC,SAEpDmB,OAAM,EAACpB,SAAEA,EAAQC,MAAEA,KAElBf,EAAAE,OAAOiC,QAAQ,oBAAoBrB,QAAeC,SAGtDW,GAASG,C,EAtBXO,GAyCAd,YAAW,KACThB,EAAKC,WAAWqB,MAAQ,GACxBtB,EAAKI,UAAUkB,MAAQ,GACvBtB,EAAKK,YAAYiB,MAAQ,EAAE,GAC1B,I","sources":["src/js/03-promises.js"],"sourcesContent":["{\n  /* <form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form> */\n}\n\n{\n  //todo Example how to create array from number(const amount):\n  // const array = Array.from({ length: amount }, (_, i) => i + 1);\n}\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nNotify.init({\n  timeout: 4000,\n  cssAnimationDuration: 1000,\n});\n\nconst refs = {\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.submitBtn.addEventListener('click', onSubmitBtnClick);\n\nfunction onSubmitBtnClick(e) {\n  e.preventDefault();\n  generatePromises();\n  clearFormFields();\n}\n\nfunction generatePromises() {\n  let delay = Number(refs.delayInput.value);\n  const step = Number(refs.stepInput.value);\n  const amount = Number(refs.amountInput.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    const position = i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) =>\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`)\n      );\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction clearFormFields() {\n  setTimeout(() => {\n    refs.delayInput.value = '';\n    refs.stepInput.value = '';\n    refs.amountInput.value = '';\n  }, 1000);\n}\n"],"names":["$iQIUW","parcelRequire","Notify","init","timeout","cssAnimationDuration","$47d4ff9957288465$var$refs","delayInput","document","querySelector","stepInput","amountInput","submitBtn","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","i","then","success","catch","failure","$47d4ff9957288465$var$generatePromises"],"version":3,"file":"03-promises.c2e0bcb2.js.map"}