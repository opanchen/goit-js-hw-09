{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAyBAD,EAAAE,OAAOC,KAAK,CACVC,QAAS,IACTC,qBAAsB,MAGxB,IAAMC,EAAO,CACXC,WAAYC,SAASC,cAAc,uBACnCC,UAAWF,SAASC,cAAc,sBAClCE,YAAaH,SAASC,cAAc,wBACpCG,UAAWJ,SAASC,cAAc,0BAiCpC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAxCPT,EAAKM,UAAUW,iBAAiB,SAEhC,SAA0BC,GACxBA,EAAEC,iBAKJ,WAKE,IAJA,IAAIC,EAAQC,OAAOrB,EAAKC,WAAWqB,OAC7BC,EAAOF,OAAOrB,EAAKI,UAAUkB,OAC7BE,EAASH,OAAOrB,EAAKK,YAAYiB,OAE9BG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CAGnClB,EAFiBkB,EAEOL,GACrBM,MAAK,SAAAC,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,M,OAEjBf,EAAAE,OAAOgC,QAAQ,qBAAoCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAE1DqB,OAAM,SAAAH,G,IAAGnB,EAAQmB,EAARnB,SAAUC,EAAKkB,EAALlB,M,OAElBf,EAAAE,OAAOmC,QAAQ,oBAAmCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAG5DW,GAASG,C,EAtBXS,GAyCAhB,YAAW,WACThB,EAAKC,WAAWqB,MAAQ,GACxBtB,EAAKI,UAAUkB,MAAQ,GACvBtB,EAAKK,YAAYiB,MAAQ,E,GACxB,I","sources":["src/js/03-promises.js"],"sourcesContent":["{\n  /* <form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form> */\n}\n\n{\n  //todo Example how to create array from number(const amount):\n  // const array = Array.from({ length: amount }, (_, i) => i + 1);\n}\n\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nNotify.init({\n  timeout: 4000,\n  cssAnimationDuration: 1000,\n});\n\nconst refs = {\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  submitBtn: document.querySelector('button[type=\"submit\"]'),\n};\n\nrefs.submitBtn.addEventListener('click', onSubmitBtnClick);\n\nfunction onSubmitBtnClick(e) {\n  e.preventDefault();\n  generatePromises();\n  clearFormFields();\n}\n\nfunction generatePromises() {\n  let delay = Number(refs.delayInput.value);\n  const step = Number(refs.stepInput.value);\n  const amount = Number(refs.amountInput.value);\n\n  for (let i = 1; i <= amount; i += 1) {\n    const position = i;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) =>\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`)\n      );\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nfunction clearFormFields() {\n  setTimeout(() => {\n    refs.delayInput.value = '';\n    refs.stepInput.value = '';\n    refs.amountInput.value = '';\n  }, 1000);\n}\n"],"names":["$h6c0i","parcelRequire","Notify","init","timeout","cssAnimationDuration","$ce04d3a99e08e73b$var$refs","delayInput","document","querySelector","stepInput","amountInput","submitBtn","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","preventDefault","delay1","Number","value","step","amount","i","then","param","success","concat","catch","failure","$ce04d3a99e08e73b$var$generatePromises"],"version":3,"file":"03-promises.a1134529.js.map"}